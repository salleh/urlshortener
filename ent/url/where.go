// Code generated by ent, DO NOT EDIT.

package url

import (
	"time"
	"urlshortener/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ShortPath applies equality check predicate on the "short_path" field. It's identical to ShortPathEQ.
func ShortPath(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortPath), v))
	})
}

// LongPath applies equality check predicate on the "long_path" field. It's identical to LongPathEQ.
func LongPath(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongPath), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// ShortPathEQ applies the EQ predicate on the "short_path" field.
func ShortPathEQ(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortPath), v))
	})
}

// ShortPathNEQ applies the NEQ predicate on the "short_path" field.
func ShortPathNEQ(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShortPath), v))
	})
}

// ShortPathIn applies the In predicate on the "short_path" field.
func ShortPathIn(vs ...string) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShortPath), v...))
	})
}

// ShortPathNotIn applies the NotIn predicate on the "short_path" field.
func ShortPathNotIn(vs ...string) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShortPath), v...))
	})
}

// ShortPathGT applies the GT predicate on the "short_path" field.
func ShortPathGT(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShortPath), v))
	})
}

// ShortPathGTE applies the GTE predicate on the "short_path" field.
func ShortPathGTE(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShortPath), v))
	})
}

// ShortPathLT applies the LT predicate on the "short_path" field.
func ShortPathLT(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShortPath), v))
	})
}

// ShortPathLTE applies the LTE predicate on the "short_path" field.
func ShortPathLTE(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShortPath), v))
	})
}

// ShortPathContains applies the Contains predicate on the "short_path" field.
func ShortPathContains(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShortPath), v))
	})
}

// ShortPathHasPrefix applies the HasPrefix predicate on the "short_path" field.
func ShortPathHasPrefix(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShortPath), v))
	})
}

// ShortPathHasSuffix applies the HasSuffix predicate on the "short_path" field.
func ShortPathHasSuffix(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShortPath), v))
	})
}

// ShortPathEqualFold applies the EqualFold predicate on the "short_path" field.
func ShortPathEqualFold(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShortPath), v))
	})
}

// ShortPathContainsFold applies the ContainsFold predicate on the "short_path" field.
func ShortPathContainsFold(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShortPath), v))
	})
}

// LongPathEQ applies the EQ predicate on the "long_path" field.
func LongPathEQ(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongPath), v))
	})
}

// LongPathNEQ applies the NEQ predicate on the "long_path" field.
func LongPathNEQ(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongPath), v))
	})
}

// LongPathIn applies the In predicate on the "long_path" field.
func LongPathIn(vs ...string) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLongPath), v...))
	})
}

// LongPathNotIn applies the NotIn predicate on the "long_path" field.
func LongPathNotIn(vs ...string) predicate.Url {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLongPath), v...))
	})
}

// LongPathGT applies the GT predicate on the "long_path" field.
func LongPathGT(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongPath), v))
	})
}

// LongPathGTE applies the GTE predicate on the "long_path" field.
func LongPathGTE(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongPath), v))
	})
}

// LongPathLT applies the LT predicate on the "long_path" field.
func LongPathLT(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongPath), v))
	})
}

// LongPathLTE applies the LTE predicate on the "long_path" field.
func LongPathLTE(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongPath), v))
	})
}

// LongPathContains applies the Contains predicate on the "long_path" field.
func LongPathContains(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongPath), v))
	})
}

// LongPathHasPrefix applies the HasPrefix predicate on the "long_path" field.
func LongPathHasPrefix(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongPath), v))
	})
}

// LongPathHasSuffix applies the HasSuffix predicate on the "long_path" field.
func LongPathHasSuffix(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongPath), v))
	})
}

// LongPathEqualFold applies the EqualFold predicate on the "long_path" field.
func LongPathEqualFold(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongPath), v))
	})
}

// LongPathContainsFold applies the ContainsFold predicate on the "long_path" field.
func LongPathContainsFold(v string) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongPath), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Url) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Url) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Url) predicate.Url {
	return predicate.Url(func(s *sql.Selector) {
		p(s.Not())
	})
}
